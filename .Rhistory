}
headers <- read.csv(path_input, header = FALSE, nrows = 1, as.is = TRUE)
data_raw <- read.csv(path_input, skip = 3, header = FALSE)
colnames(data_raw) <- headers
data_filtered <- data_raw %>%
filter(
mobile_screened == 0,
compcheck2_failed != 1,
compcheck2_failed_task2 != 1,
no_consent == 0,
Finished == "True",
Progress == 100,
(url_correct == 1), #,remove later also change to == 1
PROLIFIC_PID != "65032c0e9f8649f89c39327e",#thomas prolific id
PROLIFIC_PID != "6627c14abd2692998a9192f6" #my prolific id
) %>%
rename(id =  PROLIFIC_PID)
#View(data_filtered %>% select(url_correct,tasks,par1,response1))
###############################################################################
########### transform all varying input and output to long format #############
###############################################################################
#data_filtered$id <- row.names(data_filtered) #REMOVE LATER
#INPUT OUTPUT COLUMNS PER DECIONS
dec_info_col <- c("par1", "par2", "par3", "response1", "response2", "response3", "cu", "time", "order_tasks", "order_tasks2")
# data_filtered <- data_filtered[29:nrow(data_filtered),] %>% #REMOVE LATER
#   filter(id!= 69, id!=100)
#save bonus payment
data_filtered %>%
select(id, bonus, bonus_task, bonus_string, bonus_round) %>%
write_csv(paste0(path_output_bonus,"/bonus_raw.csv"))
rm(list = ls())
# -----------------------------------------------------------------------------
renv::load(here::here())
# Libraries -------------------------------------------------------------------
library(tidyr)
library(readr)
library(data.table)
library(stringr)
library(purrr)
library(jsonlite)
library(dplyr)
library(here)
#renv::update("dplyr") #or tidyr
### Data processing file for "Attenuation Everywhere" ###
### Takes Qualtrics data output and process data to long format ###
# set the directory relative to the git repo
try(setwd(dirname(rstudioapi::getActiveDocumentContext()$path)))
setwd(system("git rev-parse --show-toplevel", intern=T))
path_data<- "Analyses/Data"
analysis_name <- "pilot_final"
path_input <- file.path(path_data,paste0(analysis_name, ".csv"))
path_input_clean <- file.path(path_data,paste0(analysis_name,"_qualtrics_clean", ".csv"))
path_output_analysis <- file.path(path_data,paste0(analysis_name,"_analysis", ".csv"))
path_task_info <- file.path(path_data,paste0(analysis_name,"_tasks_info", ".csv"))
path_output_fig <- file.path("Analyses/R Code/output", "test")
df_surv <- read.csv(path_input_clean,  header = TRUE)
df_tasks_info <-  read.csv(path_task_info,  header = TRUE)
################################################################################
################################## Functions  #################################
################################################################################
#convert time to days
convert_to_days <- function(number, unit) {
numeric_value <- as.numeric(number)
if (unit == "days" | unit == "day") {
return(numeric_value)
} else if (unit == "hour" | unit == "hours") {                                # I can recode the 1 hour from the STO task as 0 -right?
return(0)
} else if (unit == "weeks" | unit == "week") {
return(numeric_value * 7)
} else if (unit == "month" | unit == "months") {
return(numeric_value * 30)
} else if (unit == "years" | unit == "year") {
return(numeric_value * 365)
} else {
return(NA)
}
}
calc_correct_tax <- function(par_arr) {
after_tax <- c()
for (par in par_arr) {
par[is.na(par)] <- 0
correct <- 0
deductible <- 13850
par <- max(0, par - deductible)
if (par > 578126) {
correct <- correct + (par - 578126) * 0.37
par <- 578126
}
if (par > 231250) {
correct <- correct + (par - 231250) * 0.35
par <- 231250
}
if (par > 182101) {
correct <- correct + (par - 182101) * 0.32
par <- 182101
}
if (par > 95376) {
correct <- correct + (par - 95376) * 0.24
par <- 95376
}
if (par > 44726) {
correct <- correct + (par - 44726) * 0.22
par <- 44726
}
if (par > 11000) {
correct <- correct + (par - 11000) * 0.12
par <- 11000
}
correct <- correct + par * 0.10
after_tax <- c(after_tax, correct)
}
return(after_tax)
}
################################################################################
####################### Close / Far parameters #################################
################################################################################
df_surv <- df_surv %>%
mutate(
cu = 100 - as.numeric(cu),
time_dec = as.numeric(time_dec),
time_total = as.numeric(time_total),
time_dec2_POA = as.numeric(time_dec2_POA),
par1_raw = par1,
par2_raw = par2,
par3_raw = par3,
resp1_raw = resp1,
resp2_raw = resp2,
resp3_raw = resp3
)
# remove string variables first.
df_surv$par1 <- sapply(1:nrow(df_surv), function(i) {
if (df_surv$task[i] %in% c("TID", "STO", "EGB")) {
convert_to_days(df_surv$par1[i], df_surv$par2[i])
} else {
df_surv$par1[i]
}
})
df_surv <- df_surv %>%
mutate(
par2 = ifelse(task == "REC", NA, par2),
par2 = ifelse(task %in% c("TID", "STO", "EGB"), NA, par2),
par3 = ifelse(task == "POA", NA, par3)
) %>%
mutate(
par1 = as.numeric(par1),
par2 = as.numeric(par2),
par3 = as.numeric(par3),
resp1 = as.numeric(resp1),
resp2 = as.numeric(resp2),
resp3 = as.numeric(resp3)
)
### define which parameteres are close or far away from the boundary and add
### tasks information
df_surv <- df_surv %>%
left_join(., df_tasks_info) %>%
mutate(
ub = as.numeric(ub),
lb = as.numeric(lb),
ub_raw = ub,
lb_raw = lb,
far = case_when(
(is.na(lb) & is.na(ub)) ~ TRUE,
TRUE ~ ifelse((far_1<= par1) & (par1 <= far_2), TRUE, FALSE)
),
close = FALSE,
close = case_when(
(is.na(lb)) ~ close,
TRUE ~ ifelse((close_lb_1<= par1) & (par1 <= close_lb_2), TRUE, close)
),
close = case_when(
(is.na(ub)) ~ close,
TRUE ~ ifelse((close_ub_1<= par1) & (par1 <= close_ub_2), TRUE, close)
),
)
tasks <- df_surv %>%
distinct(task) %>%
unlist()
### correct normative responses (this is not the correct normative dependet variable used for the regression)
correct_linear <- c("REC", "MUL", "PRO", "SIA", "BEU", "FOR", "CMA")
correct_non_linear <- c("CMA", "BEU", "TAX", "SEA", "SIA", "EGB")
df_surv <- df_surv %>%
mutate(
correct = case_when(
#  task == "IND" ~ (par1/100 - 0.5) * 5,
task == "CMA" ~ par1 / (par1 + 1) * 100,
task == "FOR" ~  (resp3 +resp3 * par1 * (resp3 - resp2)/resp2),
task == "BEU" ~ ifelse(
resp2 == 0,
3 * par1 / (par1 + 200) * 100,
2 * par1 / (300 - par1) * 100
),
task == "TAX" ~  calc_correct_tax(par1),
task == "REC" ~  par1 * 2,
task == "SEA" ~  100 - sqrt(2)*sqrt(par1*(100 - 1)),
task == "MUL" ~  3/2*par1,
task == "PRO" ~  (200 - par1)/2,
task == "SIA" ~ par1/100 * resp2 + (100 - par1) /100 * resp3,
task == "EGB" ~ ifelse(par1 <= 365, 100 + 100 * 0.1/365 * par1, 100*1.1^(par1/365)),
## task == "VOT" ~  ifelse(par1 >= 50, 0, 1),
TRUE ~ NA
),
correct_raw = correct
)
df_surv <- df_surv %>%
mutate(obj_sol = ifelse(
!is.na(correct), TRUE, FALSE
))
for (N in 5:60){
print(N)
print(choose(N, N/2) * (1/2)^N>1/9)
}
################################################################################
############################### NORMALIZATIONS #################################
################################################################################
#these tasks need no parameter normalization
tasks_no_norm_par <- c("SAV","PRD", "EXT", "EGI","DIS","ENS","EFF","PRS","PAC",
"FAI", "CHT", "SEA", "GTP", "PRO", "TID",
"NEW", "EGB", "POL", "VOT", "STO","GGI", "GPT", "FOR")
#these tasks need no response normalization
tasks_no_norm_resp <- c("SAV","DIG", "IND", "PRD", "EXT", "EGI","DIS","ENS","EFF","PRS","PAC",
"FAI", "TAX", "CHT", "REC", "SEA", "MUL", "GTP", "PRO",
"NEW", "POL", "VOT", "STO", "DIL","GGI", "GPT")
#tasks where I have to flip sign for increasing monotonicity
#cma: normalised response increasing while raw response decreasing
tasks_decrease <- c("DIG", "DIS", "CHT", "SEA", "PRO", "TID", "NEW", "POL", "VOT")
df_surv <- df_surv %>%
mutate(
resp_n = ifelse(
task %in% tasks_no_norm_resp,
ifelse(
task %in% tasks_decrease,
-resp1,
resp1
),
NA
),
resp_n_sgn = ifelse(
task %in% tasks_no_norm_resp,
resp1,
NA
),
correct_n = ifelse(
task %in% tasks_no_norm_resp,
ifelse(
(task %in% tasks_decrease) & !is.na(correct),
-correct,
correct
),
NA
),
correct_n_sgn = ifelse(
task %in% tasks_no_norm_resp,
correct,
NA
),
par_n = ifelse(
task %in% tasks_no_norm_par,
par1,
NA
),
par1_no_recode = par1,
par2_no_recode = par2,
par3_no_recode = par3,
resp1_no_recode = resp1,
resp2_no_recode = resp2,
resp3_no_recode = resp3,
)
################################## RECODING ####################################
df_surv <- df_surv %>%
mutate(
par1 = case_when(
# task == "FOR" ~  case_when(
#   par1 == 0 ~ 0.1,
#   par1 == 100 ~ 99.9,
#   TRUE ~ par1),
task == "BEU" ~  case_when(
par1 == 0 ~ 0.1,
par1 == 100 ~ 99.9,
TRUE ~ par1),
task == "CMA" ~  case_when(
par1 == 0 ~ 0.1,
par1 == 100 ~ 99.9,
TRUE ~ par1),
TRUE ~ par1),
lb = case_when(
# task == "FOR" ~  case_when(
#   lb == 0 ~ 0.1,
#   TRUE ~ lb),
task == "BEU" ~  case_when(
lb == 0 ~ 0.1,
TRUE ~ lb),
task == "CMA" ~  case_when(
lb == 0 ~ 0.1,
TRUE ~ lb),
TRUE ~ lb),
ub = case_when(
# task == "FOR" ~  case_when(
#   ub == 100 ~ 99.9,
#   TRUE ~ ub),
task == "BEU" ~  case_when(
ub == 100 ~ 99.9,
TRUE ~ ub),
TRUE ~ ub),
resp1 = case_when(
# task == "FOR" ~  case_when(
#   resp1 == 10 ~ 10.1,
#   resp1 == 50 ~ 49.9,
#   TRUE ~ (resp1 - 10)/( 50 - 10)),
task == "BEU" ~  case_when(
resp1 == 0 ~ 0.1,
resp1 == 100 ~ 99.9,
TRUE ~ resp1),
task == "CMA" ~  case_when(
resp1 == 0 ~ 0.1,
resp1 == 100 ~ 99.9,
TRUE ~ resp1),
task == "TID" ~  case_when(
resp1 == 0 ~ 0.1,
TRUE ~ resp1
),
TRUE ~ resp1),
correct = case_when(
# task == "FOR" ~  case_when(
#   correct == 10 ~ 10.1,
#   correct == 50 ~ 49.9,
#   TRUE ~ (correct - 10)/( 50 - 10)),
task == "BEU" ~  case_when(
correct == 0 ~ 0.1,
correct == 100 ~ 99.9,
TRUE ~ correct),
task == "CMA" ~  case_when(
correct == 0 ~ 0.1,
correct == 100 ~ 99.9,
TRUE ~ correct),
task == "TID" ~  case_when(
correct == 0 ~ 0.1,
TRUE ~ correct
),
TRUE ~ correct)
)
########################### HANDCODED NORMALIZATIONS ############################
norm_par_manual <- function(par1, par2, task, resp1, resp2, resp3, par_n, bound){
par_n_tmp <- case_when(
(!is.na(par1))&(task == "DIG") ~ par1/100, #probability
(!is.na(par1))&(task == "IND") ~ (par1/100 - 0.5)*5, #value of hint
(!is.na(par1))&(task == "CMA") ~ par1 * par1,#(p_milk/p_juice)^2
(!is.na(par1))&(task == "POA") ~ ifelse((bound == TRUE)&(!(is.na(resp3))),
ifelse(resp3 == 1, par2, par1),
resp1), #expected return
# (!is.na(par1))&(task == "FOR") ~ log(par1/100)/log(1-par1/100), #Log diagnosticity odds
(!is.na(par1))&(task == "BEU") ~ ifelse(
resp2 == 1,
log(par1/100)/log(1-par1/100),
log(1-par1/100)/log(par1/100)
),
(!is.na(par1))&(task == "TAX") ~ calc_correct_tax(par1), #correct tax
(!is.na(par1))&(task == "REC") ~ 2 * par1, #company revenue
(!is.na(par1))&(task == "MUL") ~ par1/90, #Relative profit share of A
(!is.na(par1))&(task == "CEE") ~ par1/100, #Payout prob
(!is.na(par1))&(task == "PRE") ~ par1/18, #Safe payment                                  #ok for PRE, or shouldnt I divide by 18?
(!is.na(par1))&(task == "SIA") ~ par1/100, #Payout prob
(!is.na(par1))&(task == "DIL") ~ par1/100, #prob of doubling
TRUE ~ par_n
)
return(par_n_tmp)
}
norm_resp_manual <- function(resp1, resp2,resp3, par1, par2, par3, task, resp_n, sgn){
sgn_change <- (-1)
if(sgn == FALSE)  {
sgn_change <- 1
}
resp_n_tmp <- case_when(
is.na(resp1) ~ resp1,
task == "CMA" ~  resp1/(100 - resp1)*par1, #(q_juice/q_milk)
task == "POA" ~ resp2, #equity share
task == "FOR" ~ ((resp1 - resp3)/resp3) / (resp3 - resp2)/resp2,
task == "BEU" ~ ifelse(
resp2 == 1,
log(resp1/100)/log(1-resp1/100),
log(1-resp1/100)/log(resp1/100)
),
task == "CEE" ~ resp1/18, #normalized CE
task == "PRE" ~ resp1/100, #Switching probability
task == "TID" ~ sgn_change * log(resp1/100),#log of normalized present value
task == "SIA" ~ (resp1 - resp3)/(resp2 - resp3),#implied weight
task == "EGB" ~ log(resp1/100),#log of normalized present value           #dividing by 100 is here correct? wanted to be consistent with EGB
TRUE ~ resp_n
)
return(resp_n_tmp)
}
df_surv <- df_surv %>%
mutate(
par_n = norm_par_manual(par1, par2, task,resp1, resp2, resp3, par_n, FALSE),
lb_n =  norm_par_manual(lb, par2, task, resp1,resp2, resp3, lb, TRUE),
ub_n =  norm_par_manual(ub, par2, task, resp1,resp2, resp3, ub, TRUE),
far_2_n =  norm_par_manual(far_2,par2, task, resp1, resp2, resp3, far_2, TRUE),
resp_n = norm_resp_manual(resp1, resp2,resp3, par1, par2, par3, task, resp_n, TRUE),
correct_n = norm_resp_manual(correct, resp2,resp3, par1, par2, par3, task, correct_n, TRUE),
resp_n_sgn = norm_resp_manual(resp1, resp2,resp3, par1, par2, par3, task, resp_n_sgn, FALSE),
correct_n_sgn = norm_resp_manual(correct, resp2,resp3, par1, par2, par3, task, correct_n_sgn, FALSE)
)
# Fixed effects:
df_surv <- df_surv %>%
mutate(
FE = case_when(
task == "GPT" ~ resp2, #product
task == "BEU" ~ resp2, #signal
# task == "FOR" ~ resp2, #signal
TRUE ~ 1
),
FE = as.factor(FE)
)
# distant to boundary
df_surv <- df_surv %>%
mutate(
dist_bound_n = case_when(
(!is.na(ub_n) & !is.na(lb_n)) ~ pmin(abs(ub_n - par_n), abs(par_n - lb_n)),
!is.na(ub_n) ~ ub_n - par_n,
!is.na(lb_n) ~ par_n - lb_n,
TRUE ~ par_n
),
dist_bound_n_rev = ifelse(
!is.na(ub_n),#important, in order to get right sensitivity effects for resp on dist to boundary
ifelse(close, #if an upper boundary exists, e.g. for the parameter 1,..10,11...,89,90,...100
ifelse(far_2_n <= par_n, #with close parameters 1...10, 90...100, distant to boundary would look like
par_n - far_2_n, #1...10, 10...1, but for the regressions response on distance to boundary,
par_n),#the effect from the upper boundary region and from the lower boundary regeion
par_n),#would exactly look into the oppositte direction. so if there exists an upper boundary
par_n)                 #dist_bound_n_rev has to look like  1...10, 1...10 -> counting in the same direction!
)
# View(df_surv %>%
#       filter(task == "DIG") %>%
#       select(par1_raw, par_n, far_2_n, ub_n, dist_bound_n, dist_bound_n_rev, close, far) %>%
#       distinct(par1_raw, .keep_all = TRUE))
# View(df_surv %>%
#        filter(task == "PRO") %>%
#        select(par1_raw, par_n, far_2_n, ub_n, dist_bound_n, dist_bound_n_rev, close, far) %>%
#        distinct(par1_raw, .keep_all = TRUE))
# View(df_surv %>%
#        filter(task == "NEW") %>%
#        select(par1_raw, par_n, far_2_n, ub_n, dist_bound_n, dist_bound_n_rev, close, far) %>%
#        distinct(par1_raw, .keep_all = TRUE))
# View(df_surv %>%
#        filter(task == "BEU") %>%
#        select(par1_raw, par_n, far_2_n, ub_n, dist_bound_n, dist_bound_n_rev, close, far, resp_n) %>%
#        distinct(par1_raw, .keep_all = TRUE))
# cu dummies
df_surv<- df_surv %>%
group_by(task, par_n) %>%
mutate(high_cu_par = cu > median(cu)) %>%
ungroup() %>%
group_by(task, id) %>%
mutate(high_cu_id = cu > median(cu)) %>%
ungroup()
#View(df_surv %>% select(task, lb_n, lb, par1, par_n, ub, ub_n, close, far, resp1, resp2, resp_n, correct,correct_raw, correct_n) %>% arrange(task, par1))
#################################################################################
######################calculate benchmark sensitivy#############################
#################################################################################
# ==== sensitivity from non-linear normative responses =====
sens_df <- data.frame()
for (name in intersect(correct_linear,tasks)) {
#name <- "BEU"
if(name %in% c("BEU")){
#check this seperately b/c we double check if our transformation of resp and par are correct
#they should be the same within signal
current_df <- df_surv %>%
filter(task == name) %>%
distinct(par_n, resp2, .keep_all = TRUE)  %>%
select(task, par_n, par1_raw, resp2, correct_n)
current_df <- current_df %>%
filter(!is.na(par_n)) %>%
arrange(resp2, par_n) %>%
mutate(
sens_linear := (correct_n - dplyr::lag(correct_n)) /(par_n - dplyr::lag(par_n))
) %>%
select(sens_linear, task, par_n, par1_raw, resp2, correct_n)
if(name == "BEU"){### BEU extra b/c sensitivity is not entirely constant (at the boundaries presumably b/c of numeric issues)
sens_BEU_0 <- current_df %>%
filter( resp2 == 0, par1_raw == 60) %>%
select(sens_linear)   %>%
unlist()
sens_BEU_1 <- current_df %>%
filter( resp2 == 1, par1_raw == 60) %>%
select(sens_linear) %>%
unlist()
current_df<- current_df %>%
mutate(sens_linear = ifelse(resp2 == 1, sens_BEU_1, sens_BEU_0))
}
print("------------")
print(name)
print(n=26, current_df)
sens_df <- rbind(sens_df,current_df %>%
select(sens_linear, par_n, task))
}else{
current_df <- df_surv %>%
filter(task == name) %>%
distinct(par_n, .keep_all = TRUE)  %>%
select(task, par_n, correct_n)
current_df <- current_df %>%
filter(!is.na(par_n)) %>%
arrange(par_n) %>%
mutate(
sens_linear := (correct_n - dplyr::lag(correct_n)) /(par_n - dplyr::lag(par_n))
) %>%
select(sens_linear, task, par_n, correct_n)
print("------------")
print(current_df)
print(name)
sens_df <- rbind(sens_df,current_df %>%
select(sens_linear, par_n, task))
}
}
